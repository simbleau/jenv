#!/bin/bash

## Ensure that proper conventions are setup, i.e. that the user has
## a valid source folder (named 'src') and a binary folder (named 'bin')
## which can be used to set the classpath.
##
## @author Spencer Imbleau
## @version July 2019

# Print usage for the program
print_usage() {
	echo "Usage: \"source jsrc <source_path>\""
	return 1
}

# Checks for the source path
#
# @params $1 - the source path to check
# @returns 0 if the source path exists, 1 otherwise
check_source_path() {
	#Check if source path is a directory 
	if [ ! -d $1 ]
	then
		print_usage
		echo "[ERROR] $1 is not a directory."
		return 1
	fi
	
	if [ "${1: -4}" != "/src" ]
	then
		echo "[ERROR] $1 must be a directory named src."
		echo "--> You should initiate jsrc on your source directory."
		return 1
	fi

	return 0
}

# Checks for the bin path
#
# @params $1 - the bin path to check	
# @returns 0 if the bin path exists, 1 otherwise
check_bin_path() {
	# Check if bin path does not exist
	if [ ! -d $BIN_PATH ]
	then
		echo -n "$BIN_PATH does not exist. Create it now? (y/N) > "
	
		#Create bin directory on request
		read -n1 input
		echo ""
		if [ $input == "y" ] || [ $input == "Y" ]
		then
			echo "Creating $BIN_PATH"
			mkdir $BIN_PATH 2> /dev/null
			if [ $? -ne 0 ] # Check for mkdir success
			then
				echo "[ERROR] Could not create $BIN_PATH."
				return 1
			fi
		else
			echo "[ERROR] You must obey standard conventions to use this program."
			return 1
		fi
	fi

	return 0
}

# Checks if the program being called is sourced
#
# @returns 0 if the program is sourced, 1 otherwise 
check_program_sourced() {
	if [[ "${BASH_SOURCE[0]}" != "${0}" ]]
	then
		return 0
	else
		print_usage
		return 1
	fi
}

# Start of the program (functioned)
#
# @params $@ - the command line arguments	
# @returns 0 if the program executed successfully, 1 otherwise
main() {
	# Check <= 1 args passed
	if [ $# -gt 1 ]
	then
		print_usage
		return 1
	fi
	
	# Check if the program is sourced
	check_program_sourced
	if [ $? -ne 0 ]
	then
		return 1
	fi

	# Program can start! Proper usage.
	# --------------------------------

	# Index environment locations
	if [ "$#" -eq 0 ] # Check if a source path was passed
	then # No arguments were passed
		SOURCE_PATH=$(realpath . 2> /dev/null)
	else # 1 argument
		SOURCE_PATH=$(realpath $1 2> /dev/null)
	fi
	STRUCTURE_PATH=$(realpath ${SOURCE_PATH}/.. 2> /dev/null)
	BIN_PATH=$(realpath ${SOURCE_PATH}/../bin 2> /dev/null)
	
	# Check for a valid source path
	check_source_path $SOURCE_PATH
       	src_exists=$?
	if [ $src_exists -ne 0 ]
	then
		return 1
	fi

	# Check for a valid bin path
	check_bin_path $BIN_PATH
	bin_exists=$? 
	if [ $bin_exists -ne 0 ]
	then
		return 1
	fi

	export CLASSPATH=$BIN_PATH
	return 0
} 

# Start the program
main $@

# Check if the program ran succesfully
if [ $? -eq 0 ]
then
	echo "ROOT: $STRUCTURE_PATH"
	echo "SOURCE: $SOURCE_PATH"
	echo "CLASSPATH: $CLASSPATH"
	echo "...Complete!"
else
	echo "Error occurred. See details above."
fi 


